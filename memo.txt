----제로초 TS + React강좌----

//github에서 내려받은 경우 lecture폴더안에 npm install로 node_modules폴더 다운받기
//ts파일을 컴파일해서 js파일로 만들려면 터미널의 경로를 lecture로 설정하고 npx webpack또는 npm run dev라고 입력하면 된다.
//실행은 html파일 실행시키면 된다.

/*강좌소개*/

예전에 리액트웹게임을할때는 웹팩에다가 로더를 붙였다. 예전 리액트웹게임강좌에서는 바벨+로더를 붙여서 웹팩과 바벨을 이어줬다면
이번에는 타입스크립트를 사용하기 때문에 웹팩과 타입스크립트를 이어줄것이다. 타입스크립트에서는 로더가 크게 두가지있다. 그중 하나가 ts-loader가 있고
다른 하나는 awesome-typescript-loader가 있는데 이번시간에는 awesome-typescript-loader를 사용하겠다. 두개의 차이점은 awesome-typescript-loader같은경우에는
useBabel이라는 것을 통해서 바벨과 함께 사용할 수 있다.
 
react가 js로 만들어졌기 때문에 일반적인 react는 typescript가 읽지 못한다. 따라서 npx create-react-app --typescript로 프로젝트를 만드는게 아니라면 
npm i @types/react @types/react-dom이렇게 @types가 붙여진 react와 react-dom을 각각 설치해야 한다.


/*기본 타입스크립트 세팅하기*/

참고로 webpack.config.js파일 안에 있는 entry, module, plugins, output이 4가지의 기능이 tsc-watch의 기능과 거의 유사하다고 볼 수 있다.


/*class state 타이핑*/

매개변수의 타입유형을 지정하려고 하는데 매개변수의 타입유형이 뭔지 모르겠으면 
매개변수의 값을 전달해주는 속성(정확하게 말하면 이벤트가 발생된 지점에 위치하고 있는 속성)에다가 마우스를 갖다대면 ts가 알려준다.(이걸 제로초는 타입추론이라고 부른다)

hooks에서는 interface나 제네릭으로 따로 타입유형을 지정하지 않아도 useState를 지정한 state에다가 마우스를 갖다대면 타입의 유형이 나타난다.
hooks라고 전부 usestate의 타입의 유형이 나오는 건 아니고 만약 나오지 않는다면 const [value, setValue] = useState<string>(''); 
이렇게 사이에다가 <string>이런식으로 제네릭을 넣어야 한다.

/*useCallback 타이핑*/

onChange={useCallback<(e: React.ChangeEvent<HTMLInputElement>) => void>((e) => setValue(e.currentTarget.value), [])} //usecallback에다가 <(e: React.ChangeEvent<HTMLInputElement>) => void>이렇게 제네릭으로 타입을 지정하거나 아니면 usecallback의 매개변수 e한테 타입을 지정할 수 있다.
(이렇게 하는 이유는 usecallback으로 감싸면 매개변수의 타입추론이 불가능하기 때문인데 이렇게 하면 타입추론이 된다.) 


const onChange = useCallback<(e: React.ChangeEvent<HTMLInputElement>) => void>((e) => { //제네릭안에다가 함수를 정의하고 그 함수의 매개변수에다가 타입을 지정했다. 이렇게 해도 되고 아니면 그냥 usecallback의 매개변수 e한테 타입을 지정해도 된다.
    setValue(e.currentTarget.value) 
}, []);

const onChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => { //usecallback의 매개변수에다가 타입을 지정했다. 이렇게 해도 되고 아니면 위에처럼 제네릭으로 해도된다.
    setValue(e.currentTarget.value)
}, []);

/*끝말잇기 class 타이핑과 q&a*/

createRef, useRef, useState, useCallback모두 제네릭 자리가 있어서 타입지정을 할 수 있게 되어있다. class빙식에서 props와 state 타입지정할 때 제네릭사용하는 것도 마찬가지이다.

/*setTimeout, useRef 타이핑*/

제네릭의 역할은 타입이 제대로 안잡혔을때 수동으로 잡아주는 게 제네릭의 역할이다. 또 다른 말로는 제네릭은 타입추론을 제대로 해주는 역할이다. 직접 제네릭안에다가 타입을 지정해서 타입추론이 제대로 되게 하는게 제네릭의 역할이다.

const [tries, setTries] = useState<TryInfo[]>([]); //스테이트가 처음에 빈 배열일때에는 타입추론이 안될 수 있어서 타입을 제네릭으로 지정해줘야 한다.

useCallback사용할때는 useCallback안에서 사용하는 state들은 전부 useCallback의 배열안에 넣어줘야 한다.

useCallback에 마우스를 올리면 제네릭자리가 뭐가 되야하는지 힌트가 나온다.

/*Class State에서의 주의점*/

window.setTimeout //타입스크립트에서 setTimeout을 사용할때는 브라우저인지 노드인지 구분해줘야한다. 지금은 브라우저이기 때문에 window를 앞에 붙이면 된다.

클래스로 스테이트의 타입을 interface로 지정해주고 스테이트의 타입을 지정한 interface를 스테이트에 연결시키려면 제네릭으로 프롭스와 함께 연결시킬수 있지만 
배열이나 뭔가 특수한 것을 사용해서 연결이 안되면 interface로 타입을 지정한 것이 Istate라고 했을때 

state: Istate = {
    apple: 'ddfe',
    message: 1,
};

이렇게 Istate를 연결시켜주면 된다.

/*useCallback과 keyof, typeof*/

const rspCoords = {
    바위: '0',
    가위: '-142px',
    보: '-284px',
} as const;

rspCoords라는 상수안에 객체를 정의했다. 그런데 저 객체들은 상수라서 값이 안바뀐다. 하지만 타입스크립트는 string이라고 인식한다. 그러기 때문에 
as const라는 것을 붙여주면 '0', '-142px', '-284px' 그 값으로 타입이 지정된다. rspCoords에 마우스 올리면 타입이 바뀐것을 알수있다.

type imgCoords = '0' | '-142px' | '-284px'; //이거의 뜻은 imgCoords의 타입으로 '0', '-142px', '-284px'중 하나가 될 수 있다 이런뜻이다.
type a = typeof rspCoords; //이거의 뜻은 a라는 타입은 rspCoords가 된다이다.
type abc = keyof typeof rspCoords; //이거의 뜻은 abc라는 타입은 rspCoords의 키값중 하나가 된다이다.
type ImgCoords = typeof rspCoords[keyof typeof rspCoords]; //이거의 뜻은 ImgCoords라는 타입은 rspCoords의 벨류값중 하나가 된다이다.


/*가위바위보 타이핑하기*/

const onClickBtn = (choice: keyof typeof rspCoords) => () => { //이런식으로 하나의 함수에 () =>가 두번씩 연속으로 있는 것을 고차함수라고 하는데 컴포넌트에서 onClick={onClickBtn('바위')}이런식으로 인자를 받는다면 고차함수를 사용해서 매개변수가 인자를 받을 수 있도록 해야한다. 
        clearInterval(interval.current);
        const myScore = scores[choice];
        const cpuScore = scores[computerChoice(imgCoord)];
        const diff = myScore - cpuScore;
        if (diff === 0) {
            setResult('비겼습니다!');
          } else if ([-1, 2].includes(diff)) {
            setResult('이겼습니다!');
            setScore((prevScore) => prevScore + 1);
          } else {
            setResult('졌습니다!');
            setScore((prevScore) => prevScore - 1);
          }
          setTimeout(() => {
            interval.current = window.setInterval(changeHand, 100);
          }, 1000);
    }
